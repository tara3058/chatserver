// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_relation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_relation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_relation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_relation_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_relation_2eproto;
namespace relationservice {
class AddFriendRequest;
struct AddFriendRequestDefaultTypeInternal;
extern AddFriendRequestDefaultTypeInternal _AddFriendRequest_default_instance_;
class AddFriendResponse;
struct AddFriendResponseDefaultTypeInternal;
extern AddFriendResponseDefaultTypeInternal _AddFriendResponse_default_instance_;
class CreateGroupRequest;
struct CreateGroupRequestDefaultTypeInternal;
extern CreateGroupRequestDefaultTypeInternal _CreateGroupRequest_default_instance_;
class CreateGroupResponse;
struct CreateGroupResponseDefaultTypeInternal;
extern CreateGroupResponseDefaultTypeInternal _CreateGroupResponse_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class GetFriendsRequest;
struct GetFriendsRequestDefaultTypeInternal;
extern GetFriendsRequestDefaultTypeInternal _GetFriendsRequest_default_instance_;
class GetFriendsResponse;
struct GetFriendsResponseDefaultTypeInternal;
extern GetFriendsResponseDefaultTypeInternal _GetFriendsResponse_default_instance_;
class GetGroupsRequest;
struct GetGroupsRequestDefaultTypeInternal;
extern GetGroupsRequestDefaultTypeInternal _GetGroupsRequest_default_instance_;
class GetGroupsResponse;
struct GetGroupsResponseDefaultTypeInternal;
extern GetGroupsResponseDefaultTypeInternal _GetGroupsResponse_default_instance_;
class GroupInfo;
struct GroupInfoDefaultTypeInternal;
extern GroupInfoDefaultTypeInternal _GroupInfo_default_instance_;
class GroupUserInfo;
struct GroupUserInfoDefaultTypeInternal;
extern GroupUserInfoDefaultTypeInternal _GroupUserInfo_default_instance_;
class JoinGroupRequest;
struct JoinGroupRequestDefaultTypeInternal;
extern JoinGroupRequestDefaultTypeInternal _JoinGroupRequest_default_instance_;
class JoinGroupResponse;
struct JoinGroupResponseDefaultTypeInternal;
extern JoinGroupResponseDefaultTypeInternal _JoinGroupResponse_default_instance_;
class LeaveGroupRequest;
struct LeaveGroupRequestDefaultTypeInternal;
extern LeaveGroupRequestDefaultTypeInternal _LeaveGroupRequest_default_instance_;
class LeaveGroupResponse;
struct LeaveGroupResponseDefaultTypeInternal;
extern LeaveGroupResponseDefaultTypeInternal _LeaveGroupResponse_default_instance_;
class RemoveFriendRequest;
struct RemoveFriendRequestDefaultTypeInternal;
extern RemoveFriendRequestDefaultTypeInternal _RemoveFriendRequest_default_instance_;
class RemoveFriendResponse;
struct RemoveFriendResponseDefaultTypeInternal;
extern RemoveFriendResponseDefaultTypeInternal _RemoveFriendResponse_default_instance_;
}  // namespace relationservice
PROTOBUF_NAMESPACE_OPEN
template<> ::relationservice::AddFriendRequest* Arena::CreateMaybeMessage<::relationservice::AddFriendRequest>(Arena*);
template<> ::relationservice::AddFriendResponse* Arena::CreateMaybeMessage<::relationservice::AddFriendResponse>(Arena*);
template<> ::relationservice::CreateGroupRequest* Arena::CreateMaybeMessage<::relationservice::CreateGroupRequest>(Arena*);
template<> ::relationservice::CreateGroupResponse* Arena::CreateMaybeMessage<::relationservice::CreateGroupResponse>(Arena*);
template<> ::relationservice::FriendInfo* Arena::CreateMaybeMessage<::relationservice::FriendInfo>(Arena*);
template<> ::relationservice::GetFriendsRequest* Arena::CreateMaybeMessage<::relationservice::GetFriendsRequest>(Arena*);
template<> ::relationservice::GetFriendsResponse* Arena::CreateMaybeMessage<::relationservice::GetFriendsResponse>(Arena*);
template<> ::relationservice::GetGroupsRequest* Arena::CreateMaybeMessage<::relationservice::GetGroupsRequest>(Arena*);
template<> ::relationservice::GetGroupsResponse* Arena::CreateMaybeMessage<::relationservice::GetGroupsResponse>(Arena*);
template<> ::relationservice::GroupInfo* Arena::CreateMaybeMessage<::relationservice::GroupInfo>(Arena*);
template<> ::relationservice::GroupUserInfo* Arena::CreateMaybeMessage<::relationservice::GroupUserInfo>(Arena*);
template<> ::relationservice::JoinGroupRequest* Arena::CreateMaybeMessage<::relationservice::JoinGroupRequest>(Arena*);
template<> ::relationservice::JoinGroupResponse* Arena::CreateMaybeMessage<::relationservice::JoinGroupResponse>(Arena*);
template<> ::relationservice::LeaveGroupRequest* Arena::CreateMaybeMessage<::relationservice::LeaveGroupRequest>(Arena*);
template<> ::relationservice::LeaveGroupResponse* Arena::CreateMaybeMessage<::relationservice::LeaveGroupResponse>(Arena*);
template<> ::relationservice::RemoveFriendRequest* Arena::CreateMaybeMessage<::relationservice::RemoveFriendRequest>(Arena*);
template<> ::relationservice::RemoveFriendResponse* Arena::CreateMaybeMessage<::relationservice::RemoveFriendResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace relationservice {

// ===================================================================

class AddFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.AddFriendRequest) */ {
 public:
  inline AddFriendRequest() : AddFriendRequest(nullptr) {}
  ~AddFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR AddFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRequest(const AddFriendRequest& from);
  AddFriendRequest(AddFriendRequest&& from) noexcept
    : AddFriendRequest() {
    *this = ::std::move(from);
  }

  inline AddFriendRequest& operator=(const AddFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRequest& operator=(AddFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRequest* internal_default_instance() {
    return reinterpret_cast<const AddFriendRequest*>(
               &_AddFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddFriendRequest& a, AddFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendRequest& from) {
    AddFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.AddFriendRequest";
  }
  protected:
  explicit AddFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  int32_t friend_id() const;
  void set_friend_id(int32_t value);
  private:
  int32_t _internal_friend_id() const;
  void _internal_set_friend_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.AddFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    int32_t friend_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class AddFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.AddFriendResponse) */ {
 public:
  inline AddFriendResponse() : AddFriendResponse(nullptr) {}
  ~AddFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR AddFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendResponse(const AddFriendResponse& from);
  AddFriendResponse(AddFriendResponse&& from) noexcept
    : AddFriendResponse() {
    *this = ::std::move(from);
  }

  inline AddFriendResponse& operator=(const AddFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendResponse& operator=(AddFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendResponse* internal_default_instance() {
    return reinterpret_cast<const AddFriendResponse*>(
               &_AddFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddFriendResponse& a, AddFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddFriendResponse& from) {
    AddFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.AddFriendResponse";
  }
  protected:
  explicit AddFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.AddFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class RemoveFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.RemoveFriendRequest) */ {
 public:
  inline RemoveFriendRequest() : RemoveFriendRequest(nullptr) {}
  ~RemoveFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveFriendRequest(const RemoveFriendRequest& from);
  RemoveFriendRequest(RemoveFriendRequest&& from) noexcept
    : RemoveFriendRequest() {
    *this = ::std::move(from);
  }

  inline RemoveFriendRequest& operator=(const RemoveFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFriendRequest& operator=(RemoveFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFriendRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveFriendRequest*>(
               &_RemoveFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveFriendRequest& a, RemoveFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveFriendRequest& from) {
    RemoveFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.RemoveFriendRequest";
  }
  protected:
  explicit RemoveFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // int32 friend_id = 2;
  void clear_friend_id();
  int32_t friend_id() const;
  void set_friend_id(int32_t value);
  private:
  int32_t _internal_friend_id() const;
  void _internal_set_friend_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.RemoveFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    int32_t friend_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class RemoveFriendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.RemoveFriendResponse) */ {
 public:
  inline RemoveFriendResponse() : RemoveFriendResponse(nullptr) {}
  ~RemoveFriendResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveFriendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveFriendResponse(const RemoveFriendResponse& from);
  RemoveFriendResponse(RemoveFriendResponse&& from) noexcept
    : RemoveFriendResponse() {
    *this = ::std::move(from);
  }

  inline RemoveFriendResponse& operator=(const RemoveFriendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveFriendResponse& operator=(RemoveFriendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveFriendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveFriendResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveFriendResponse*>(
               &_RemoveFriendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveFriendResponse& a, RemoveFriendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveFriendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveFriendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveFriendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveFriendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveFriendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveFriendResponse& from) {
    RemoveFriendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveFriendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.RemoveFriendResponse";
  }
  protected:
  explicit RemoveFriendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.RemoveFriendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.CreateGroupRequest) */ {
 public:
  inline CreateGroupRequest() : CreateGroupRequest(nullptr) {}
  ~CreateGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupRequest(const CreateGroupRequest& from);
  CreateGroupRequest(CreateGroupRequest&& from) noexcept
    : CreateGroupRequest() {
    *this = ::std::move(from);
  }

  inline CreateGroupRequest& operator=(const CreateGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupRequest& operator=(CreateGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupRequest* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRequest*>(
               &_CreateGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateGroupRequest& a, CreateGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupRequest& from) {
    CreateGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.CreateGroupRequest";
  }
  protected:
  explicit CreateGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupNameFieldNumber = 2,
    kGroupDescFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string group_desc = 3;
  void clear_group_desc();
  const std::string& group_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_desc();
  PROTOBUF_NODISCARD std::string* release_group_desc();
  void set_allocated_group_desc(std::string* group_desc);
  private:
  const std::string& _internal_group_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_desc(const std::string& value);
  std::string* _internal_mutable_group_desc();
  public:

  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.CreateGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_desc_;
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class CreateGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.CreateGroupResponse) */ {
 public:
  inline CreateGroupResponse() : CreateGroupResponse(nullptr) {}
  ~CreateGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGroupResponse(const CreateGroupResponse& from);
  CreateGroupResponse(CreateGroupResponse&& from) noexcept
    : CreateGroupResponse() {
    *this = ::std::move(from);
  }

  inline CreateGroupResponse& operator=(const CreateGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGroupResponse& operator=(CreateGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGroupResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGroupResponse*>(
               &_CreateGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateGroupResponse& a, CreateGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGroupResponse& from) {
    CreateGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.CreateGroupResponse";
  }
  protected:
  explicit CreateGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
    kGroupIdFieldNumber = 3,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // int32 group_id = 3;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.CreateGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.JoinGroupRequest) */ {
 public:
  inline JoinGroupRequest() : JoinGroupRequest(nullptr) {}
  ~JoinGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupRequest(const JoinGroupRequest& from);
  JoinGroupRequest(JoinGroupRequest&& from) noexcept
    : JoinGroupRequest() {
    *this = ::std::move(from);
  }

  inline JoinGroupRequest& operator=(const JoinGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupRequest& operator=(JoinGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRequest*>(
               &_JoinGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JoinGroupRequest& a, JoinGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupRequest& from) {
    JoinGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.JoinGroupRequest";
  }
  protected:
  explicit JoinGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.JoinGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class JoinGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.JoinGroupResponse) */ {
 public:
  inline JoinGroupResponse() : JoinGroupResponse(nullptr) {}
  ~JoinGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR JoinGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGroupResponse(const JoinGroupResponse& from);
  JoinGroupResponse(JoinGroupResponse&& from) noexcept
    : JoinGroupResponse() {
    *this = ::std::move(from);
  }

  inline JoinGroupResponse& operator=(const JoinGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGroupResponse& operator=(JoinGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGroupResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGroupResponse*>(
               &_JoinGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JoinGroupResponse& a, JoinGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGroupResponse& from) {
    JoinGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.JoinGroupResponse";
  }
  protected:
  explicit JoinGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.JoinGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.LeaveGroupRequest) */ {
 public:
  inline LeaveGroupRequest() : LeaveGroupRequest(nullptr) {}
  ~LeaveGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR LeaveGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGroupRequest(const LeaveGroupRequest& from);
  LeaveGroupRequest(LeaveGroupRequest&& from) noexcept
    : LeaveGroupRequest() {
    *this = ::std::move(from);
  }

  inline LeaveGroupRequest& operator=(const LeaveGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupRequest& operator=(LeaveGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGroupRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupRequest*>(
               &_LeaveGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaveGroupRequest& a, LeaveGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGroupRequest& from) {
    LeaveGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.LeaveGroupRequest";
  }
  protected:
  explicit LeaveGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.LeaveGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class LeaveGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.LeaveGroupResponse) */ {
 public:
  inline LeaveGroupResponse() : LeaveGroupResponse(nullptr) {}
  ~LeaveGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR LeaveGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGroupResponse(const LeaveGroupResponse& from);
  LeaveGroupResponse(LeaveGroupResponse&& from) noexcept
    : LeaveGroupResponse() {
    *this = ::std::move(from);
  }

  inline LeaveGroupResponse& operator=(const LeaveGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGroupResponse& operator=(LeaveGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGroupResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveGroupResponse*>(
               &_LeaveGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LeaveGroupResponse& a, LeaveGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGroupResponse& from) {
    LeaveGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.LeaveGroupResponse";
  }
  protected:
  explicit LeaveGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.LeaveGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GetFriendsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GetFriendsRequest) */ {
 public:
  inline GetFriendsRequest() : GetFriendsRequest(nullptr) {}
  ~GetFriendsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetFriendsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendsRequest(const GetFriendsRequest& from);
  GetFriendsRequest(GetFriendsRequest&& from) noexcept
    : GetFriendsRequest() {
    *this = ::std::move(from);
  }

  inline GetFriendsRequest& operator=(const GetFriendsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendsRequest& operator=(GetFriendsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendsRequest* internal_default_instance() {
    return reinterpret_cast<const GetFriendsRequest*>(
               &_GetFriendsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetFriendsRequest& a, GetFriendsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendsRequest& from) {
    GetFriendsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GetFriendsRequest";
  }
  protected:
  explicit GetFriendsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GetFriendsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GetFriendsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GetFriendsResponse) */ {
 public:
  inline GetFriendsResponse() : GetFriendsResponse(nullptr) {}
  ~GetFriendsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetFriendsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetFriendsResponse(const GetFriendsResponse& from);
  GetFriendsResponse(GetFriendsResponse&& from) noexcept
    : GetFriendsResponse() {
    *this = ::std::move(from);
  }

  inline GetFriendsResponse& operator=(const GetFriendsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFriendsResponse& operator=(GetFriendsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFriendsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFriendsResponse* internal_default_instance() {
    return reinterpret_cast<const GetFriendsResponse*>(
               &_GetFriendsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetFriendsResponse& a, GetFriendsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFriendsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFriendsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFriendsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetFriendsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetFriendsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetFriendsResponse& from) {
    GetFriendsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFriendsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GetFriendsResponse";
  }
  protected:
  explicit GetFriendsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 3,
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // repeated .relationservice.FriendInfo friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::relationservice::FriendInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::FriendInfo >*
      mutable_friends();
  private:
  const ::relationservice::FriendInfo& _internal_friends(int index) const;
  ::relationservice::FriendInfo* _internal_add_friends();
  public:
  const ::relationservice::FriendInfo& friends(int index) const;
  ::relationservice::FriendInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::FriendInfo >&
      friends() const;

  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GetFriendsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::FriendInfo > friends_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit PROTOBUF_CONSTEXPR FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FriendInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FriendInfo& from) {
    FriendInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GetGroupsRequest) */ {
 public:
  inline GetGroupsRequest() : GetGroupsRequest(nullptr) {}
  ~GetGroupsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetGroupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupsRequest(const GetGroupsRequest& from);
  GetGroupsRequest(GetGroupsRequest&& from) noexcept
    : GetGroupsRequest() {
    *this = ::std::move(from);
  }

  inline GetGroupsRequest& operator=(const GetGroupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsRequest& operator=(GetGroupsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupsRequest* internal_default_instance() {
    return reinterpret_cast<const GetGroupsRequest*>(
               &_GetGroupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetGroupsRequest& a, GetGroupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupsRequest& from) {
    GetGroupsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GetGroupsRequest";
  }
  protected:
  explicit GetGroupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GetGroupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GetGroupsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GetGroupsResponse) */ {
 public:
  inline GetGroupsResponse() : GetGroupsResponse(nullptr) {}
  ~GetGroupsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetGroupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGroupsResponse(const GetGroupsResponse& from);
  GetGroupsResponse(GetGroupsResponse&& from) noexcept
    : GetGroupsResponse() {
    *this = ::std::move(from);
  }

  inline GetGroupsResponse& operator=(const GetGroupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGroupsResponse& operator=(GetGroupsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGroupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGroupsResponse* internal_default_instance() {
    return reinterpret_cast<const GetGroupsResponse*>(
               &_GetGroupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetGroupsResponse& a, GetGroupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGroupsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGroupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGroupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGroupsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGroupsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetGroupsResponse& from) {
    GetGroupsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGroupsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GetGroupsResponse";
  }
  protected:
  explicit GetGroupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 3,
    kErrorMsgFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // repeated .relationservice.GroupInfo groups = 3;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::relationservice::GroupInfo* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupInfo >*
      mutable_groups();
  private:
  const ::relationservice::GroupInfo& _internal_groups(int index) const;
  ::relationservice::GroupInfo* _internal_add_groups();
  public:
  const ::relationservice::GroupInfo& groups(int index) const;
  ::relationservice::GroupInfo* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupInfo >&
      groups() const;

  // string error_msg = 2;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_NODISCARD std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // int32 error_code = 1;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GetGroupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupInfo > groups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GroupInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GroupInfo) */ {
 public:
  inline GroupInfo() : GroupInfo(nullptr) {}
  ~GroupInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupInfo(const GroupInfo& from);
  GroupInfo(GroupInfo&& from) noexcept
    : GroupInfo() {
    *this = ::std::move(from);
  }

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInfo& operator=(GroupInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupInfo* internal_default_instance() {
    return reinterpret_cast<const GroupInfo*>(
               &_GroupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GroupInfo& a, GroupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupInfo& from) {
    GroupInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GroupInfo";
  }
  protected:
  explicit GroupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 4,
    kNameFieldNumber = 2,
    kDescFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .relationservice.GroupUserInfo users = 4;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::relationservice::GroupUserInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupUserInfo >*
      mutable_users();
  private:
  const ::relationservice::GroupUserInfo& _internal_users(int index) const;
  ::relationservice::GroupUserInfo* _internal_add_users();
  public:
  const ::relationservice::GroupUserInfo& users(int index) const;
  ::relationservice::GroupUserInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupUserInfo >&
      users() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string desc = 3;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GroupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupUserInfo > users_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// -------------------------------------------------------------------

class GroupUserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:relationservice.GroupUserInfo) */ {
 public:
  inline GroupUserInfo() : GroupUserInfo(nullptr) {}
  ~GroupUserInfo() override;
  explicit PROTOBUF_CONSTEXPR GroupUserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupUserInfo(const GroupUserInfo& from);
  GroupUserInfo(GroupUserInfo&& from) noexcept
    : GroupUserInfo() {
    *this = ::std::move(from);
  }

  inline GroupUserInfo& operator=(const GroupUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUserInfo& operator=(GroupUserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupUserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupUserInfo* internal_default_instance() {
    return reinterpret_cast<const GroupUserInfo*>(
               &_GroupUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GroupUserInfo& a, GroupUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupUserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupUserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupUserInfo& from) {
    GroupUserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "relationservice.GroupUserInfo";
  }
  protected:
  explicit GroupUserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kRoleFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string role = 4;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:relationservice.GroupUserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_relation_2eproto;
};
// ===================================================================

class RelationService_Stub;

class RelationService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline RelationService() {};
 public:
  virtual ~RelationService();

  typedef RelationService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::AddFriendRequest* request,
                       ::relationservice::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::RemoveFriendRequest* request,
                       ::relationservice::RemoveFriendResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::CreateGroupRequest* request,
                       ::relationservice::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void JoinGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::JoinGroupRequest* request,
                       ::relationservice::JoinGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void LeaveGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::LeaveGroupRequest* request,
                       ::relationservice::LeaveGroupResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::GetFriendsRequest* request,
                       ::relationservice::GetFriendsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::GetGroupsRequest* request,
                       ::relationservice::GetGroupsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RelationService);
};

class RelationService_Stub : public RelationService {
 public:
  RelationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  RelationService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~RelationService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements RelationService ------------------------------------------

  void AddFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::AddFriendRequest* request,
                       ::relationservice::AddFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveFriend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::RemoveFriendRequest* request,
                       ::relationservice::RemoveFriendResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::CreateGroupRequest* request,
                       ::relationservice::CreateGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void JoinGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::JoinGroupRequest* request,
                       ::relationservice::JoinGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void LeaveGroup(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::LeaveGroupRequest* request,
                       ::relationservice::LeaveGroupResponse* response,
                       ::google::protobuf::Closure* done);
  void GetFriends(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::GetFriendsRequest* request,
                       ::relationservice::GetFriendsResponse* response,
                       ::google::protobuf::Closure* done);
  void GetGroups(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::relationservice::GetGroupsRequest* request,
                       ::relationservice::GetGroupsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(RelationService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddFriendRequest

// int32 user_id = 1;
inline void AddFriendRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t AddFriendRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t AddFriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.AddFriendRequest.user_id)
  return _internal_user_id();
}
inline void AddFriendRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void AddFriendRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.AddFriendRequest.user_id)
}

// int32 friend_id = 2;
inline void AddFriendRequest::clear_friend_id() {
  _impl_.friend_id_ = 0;
}
inline int32_t AddFriendRequest::_internal_friend_id() const {
  return _impl_.friend_id_;
}
inline int32_t AddFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:relationservice.AddFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void AddFriendRequest::_internal_set_friend_id(int32_t value) {
  
  _impl_.friend_id_ = value;
}
inline void AddFriendRequest::set_friend_id(int32_t value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:relationservice.AddFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// AddFriendResponse

// int32 error_code = 1;
inline void AddFriendResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t AddFriendResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t AddFriendResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.AddFriendResponse.error_code)
  return _internal_error_code();
}
inline void AddFriendResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void AddFriendResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.AddFriendResponse.error_code)
}

// string error_msg = 2;
inline void AddFriendResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& AddFriendResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.AddFriendResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddFriendResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.AddFriendResponse.error_msg)
}
inline std::string* AddFriendResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.AddFriendResponse.error_msg)
  return _s;
}
inline const std::string& AddFriendResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void AddFriendResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* AddFriendResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* AddFriendResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.AddFriendResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void AddFriendResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.AddFriendResponse.error_msg)
}

// -------------------------------------------------------------------

// RemoveFriendRequest

// int32 user_id = 1;
inline void RemoveFriendRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t RemoveFriendRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t RemoveFriendRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.RemoveFriendRequest.user_id)
  return _internal_user_id();
}
inline void RemoveFriendRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void RemoveFriendRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.RemoveFriendRequest.user_id)
}

// int32 friend_id = 2;
inline void RemoveFriendRequest::clear_friend_id() {
  _impl_.friend_id_ = 0;
}
inline int32_t RemoveFriendRequest::_internal_friend_id() const {
  return _impl_.friend_id_;
}
inline int32_t RemoveFriendRequest::friend_id() const {
  // @@protoc_insertion_point(field_get:relationservice.RemoveFriendRequest.friend_id)
  return _internal_friend_id();
}
inline void RemoveFriendRequest::_internal_set_friend_id(int32_t value) {
  
  _impl_.friend_id_ = value;
}
inline void RemoveFriendRequest::set_friend_id(int32_t value) {
  _internal_set_friend_id(value);
  // @@protoc_insertion_point(field_set:relationservice.RemoveFriendRequest.friend_id)
}

// -------------------------------------------------------------------

// RemoveFriendResponse

// int32 error_code = 1;
inline void RemoveFriendResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t RemoveFriendResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t RemoveFriendResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.RemoveFriendResponse.error_code)
  return _internal_error_code();
}
inline void RemoveFriendResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void RemoveFriendResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.RemoveFriendResponse.error_code)
}

// string error_msg = 2;
inline void RemoveFriendResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& RemoveFriendResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.RemoveFriendResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveFriendResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.RemoveFriendResponse.error_msg)
}
inline std::string* RemoveFriendResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.RemoveFriendResponse.error_msg)
  return _s;
}
inline const std::string& RemoveFriendResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void RemoveFriendResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveFriendResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveFriendResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.RemoveFriendResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void RemoveFriendResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.RemoveFriendResponse.error_msg)
}

// -------------------------------------------------------------------

// CreateGroupRequest

// int32 user_id = 1;
inline void CreateGroupRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t CreateGroupRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t CreateGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupRequest.user_id)
  return _internal_user_id();
}
inline void CreateGroupRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void CreateGroupRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupRequest.user_id)
}

// string group_name = 2;
inline void CreateGroupRequest::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::group_name() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupRequest.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupRequest.group_name)
}
inline std::string* CreateGroupRequest::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:relationservice.CreateGroupRequest.group_name)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void CreateGroupRequest::_internal_set_group_name(const std::string& value) {
  
  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_group_name() {
  
  return _impl_.group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_group_name() {
  // @@protoc_insertion_point(field_release:relationservice.CreateGroupRequest.group_name)
  return _impl_.group_name_.Release();
}
inline void CreateGroupRequest::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  _impl_.group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_name_.IsDefault()) {
    _impl_.group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.CreateGroupRequest.group_name)
}

// string group_desc = 3;
inline void CreateGroupRequest::clear_group_desc() {
  _impl_.group_desc_.ClearToEmpty();
}
inline const std::string& CreateGroupRequest::group_desc() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupRequest.group_desc)
  return _internal_group_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupRequest::set_group_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupRequest.group_desc)
}
inline std::string* CreateGroupRequest::mutable_group_desc() {
  std::string* _s = _internal_mutable_group_desc();
  // @@protoc_insertion_point(field_mutable:relationservice.CreateGroupRequest.group_desc)
  return _s;
}
inline const std::string& CreateGroupRequest::_internal_group_desc() const {
  return _impl_.group_desc_.Get();
}
inline void CreateGroupRequest::_internal_set_group_desc(const std::string& value) {
  
  _impl_.group_desc_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::_internal_mutable_group_desc() {
  
  return _impl_.group_desc_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupRequest::release_group_desc() {
  // @@protoc_insertion_point(field_release:relationservice.CreateGroupRequest.group_desc)
  return _impl_.group_desc_.Release();
}
inline void CreateGroupRequest::set_allocated_group_desc(std::string* group_desc) {
  if (group_desc != nullptr) {
    
  } else {
    
  }
  _impl_.group_desc_.SetAllocated(group_desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_desc_.IsDefault()) {
    _impl_.group_desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.CreateGroupRequest.group_desc)
}

// -------------------------------------------------------------------

// CreateGroupResponse

// int32 error_code = 1;
inline void CreateGroupResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t CreateGroupResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t CreateGroupResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupResponse.error_code)
  return _internal_error_code();
}
inline void CreateGroupResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void CreateGroupResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupResponse.error_code)
}

// string error_msg = 2;
inline void CreateGroupResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& CreateGroupResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGroupResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupResponse.error_msg)
}
inline std::string* CreateGroupResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.CreateGroupResponse.error_msg)
  return _s;
}
inline const std::string& CreateGroupResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void CreateGroupResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGroupResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGroupResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.CreateGroupResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void CreateGroupResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.CreateGroupResponse.error_msg)
}

// int32 group_id = 3;
inline void CreateGroupResponse::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t CreateGroupResponse::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t CreateGroupResponse::group_id() const {
  // @@protoc_insertion_point(field_get:relationservice.CreateGroupResponse.group_id)
  return _internal_group_id();
}
inline void CreateGroupResponse::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void CreateGroupResponse::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:relationservice.CreateGroupResponse.group_id)
}

// -------------------------------------------------------------------

// JoinGroupRequest

// int32 user_id = 1;
inline void JoinGroupRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t JoinGroupRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t JoinGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.JoinGroupRequest.user_id)
  return _internal_user_id();
}
inline void JoinGroupRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void JoinGroupRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.JoinGroupRequest.user_id)
}

// int32 group_id = 2;
inline void JoinGroupRequest::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t JoinGroupRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t JoinGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:relationservice.JoinGroupRequest.group_id)
  return _internal_group_id();
}
inline void JoinGroupRequest::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void JoinGroupRequest::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:relationservice.JoinGroupRequest.group_id)
}

// -------------------------------------------------------------------

// JoinGroupResponse

// int32 error_code = 1;
inline void JoinGroupResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t JoinGroupResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t JoinGroupResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.JoinGroupResponse.error_code)
  return _internal_error_code();
}
inline void JoinGroupResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void JoinGroupResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.JoinGroupResponse.error_code)
}

// string error_msg = 2;
inline void JoinGroupResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& JoinGroupResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.JoinGroupResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinGroupResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.JoinGroupResponse.error_msg)
}
inline std::string* JoinGroupResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.JoinGroupResponse.error_msg)
  return _s;
}
inline const std::string& JoinGroupResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void JoinGroupResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinGroupResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinGroupResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.JoinGroupResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void JoinGroupResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.JoinGroupResponse.error_msg)
}

// -------------------------------------------------------------------

// LeaveGroupRequest

// int32 user_id = 1;
inline void LeaveGroupRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t LeaveGroupRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t LeaveGroupRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.LeaveGroupRequest.user_id)
  return _internal_user_id();
}
inline void LeaveGroupRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void LeaveGroupRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.LeaveGroupRequest.user_id)
}

// int32 group_id = 2;
inline void LeaveGroupRequest::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t LeaveGroupRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t LeaveGroupRequest::group_id() const {
  // @@protoc_insertion_point(field_get:relationservice.LeaveGroupRequest.group_id)
  return _internal_group_id();
}
inline void LeaveGroupRequest::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void LeaveGroupRequest::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:relationservice.LeaveGroupRequest.group_id)
}

// -------------------------------------------------------------------

// LeaveGroupResponse

// int32 error_code = 1;
inline void LeaveGroupResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t LeaveGroupResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t LeaveGroupResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.LeaveGroupResponse.error_code)
  return _internal_error_code();
}
inline void LeaveGroupResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void LeaveGroupResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.LeaveGroupResponse.error_code)
}

// string error_msg = 2;
inline void LeaveGroupResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& LeaveGroupResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.LeaveGroupResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LeaveGroupResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.LeaveGroupResponse.error_msg)
}
inline std::string* LeaveGroupResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.LeaveGroupResponse.error_msg)
  return _s;
}
inline const std::string& LeaveGroupResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void LeaveGroupResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* LeaveGroupResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* LeaveGroupResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.LeaveGroupResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void LeaveGroupResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.LeaveGroupResponse.error_msg)
}

// -------------------------------------------------------------------

// GetFriendsRequest

// int32 user_id = 1;
inline void GetFriendsRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t GetFriendsRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t GetFriendsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.GetFriendsRequest.user_id)
  return _internal_user_id();
}
inline void GetFriendsRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetFriendsRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.GetFriendsRequest.user_id)
}

// -------------------------------------------------------------------

// GetFriendsResponse

// int32 error_code = 1;
inline void GetFriendsResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t GetFriendsResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t GetFriendsResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.GetFriendsResponse.error_code)
  return _internal_error_code();
}
inline void GetFriendsResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void GetFriendsResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.GetFriendsResponse.error_code)
}

// string error_msg = 2;
inline void GetFriendsResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& GetFriendsResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.GetFriendsResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetFriendsResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GetFriendsResponse.error_msg)
}
inline std::string* GetFriendsResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.GetFriendsResponse.error_msg)
  return _s;
}
inline const std::string& GetFriendsResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void GetFriendsResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetFriendsResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetFriendsResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.GetFriendsResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void GetFriendsResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GetFriendsResponse.error_msg)
}

// repeated .relationservice.FriendInfo friends = 3;
inline int GetFriendsResponse::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int GetFriendsResponse::friends_size() const {
  return _internal_friends_size();
}
inline void GetFriendsResponse::clear_friends() {
  _impl_.friends_.Clear();
}
inline ::relationservice::FriendInfo* GetFriendsResponse::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:relationservice.GetFriendsResponse.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::FriendInfo >*
GetFriendsResponse::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:relationservice.GetFriendsResponse.friends)
  return &_impl_.friends_;
}
inline const ::relationservice::FriendInfo& GetFriendsResponse::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::relationservice::FriendInfo& GetFriendsResponse::friends(int index) const {
  // @@protoc_insertion_point(field_get:relationservice.GetFriendsResponse.friends)
  return _internal_friends(index);
}
inline ::relationservice::FriendInfo* GetFriendsResponse::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::relationservice::FriendInfo* GetFriendsResponse::add_friends() {
  ::relationservice::FriendInfo* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:relationservice.GetFriendsResponse.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::FriendInfo >&
GetFriendsResponse::friends() const {
  // @@protoc_insertion_point(field_list:relationservice.GetFriendsResponse.friends)
  return _impl_.friends_;
}

// -------------------------------------------------------------------

// FriendInfo

// int32 id = 1;
inline void FriendInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t FriendInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t FriendInfo::id() const {
  // @@protoc_insertion_point(field_get:relationservice.FriendInfo.id)
  return _internal_id();
}
inline void FriendInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void FriendInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:relationservice.FriendInfo.id)
}

// string name = 2;
inline void FriendInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FriendInfo::name() const {
  // @@protoc_insertion_point(field_get:relationservice.FriendInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.FriendInfo.name)
}
inline std::string* FriendInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:relationservice.FriendInfo.name)
  return _s;
}
inline const std::string& FriendInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FriendInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_name() {
  // @@protoc_insertion_point(field_release:relationservice.FriendInfo.name)
  return _impl_.name_.Release();
}
inline void FriendInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.FriendInfo.name)
}

// string state = 3;
inline void FriendInfo::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& FriendInfo::state() const {
  // @@protoc_insertion_point(field_get:relationservice.FriendInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FriendInfo::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.FriendInfo.state)
}
inline std::string* FriendInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:relationservice.FriendInfo.state)
  return _s;
}
inline const std::string& FriendInfo::_internal_state() const {
  return _impl_.state_.Get();
}
inline void FriendInfo::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* FriendInfo::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* FriendInfo::release_state() {
  // @@protoc_insertion_point(field_release:relationservice.FriendInfo.state)
  return _impl_.state_.Release();
}
inline void FriendInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.FriendInfo.state)
}

// -------------------------------------------------------------------

// GetGroupsRequest

// int32 user_id = 1;
inline void GetGroupsRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t GetGroupsRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t GetGroupsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:relationservice.GetGroupsRequest.user_id)
  return _internal_user_id();
}
inline void GetGroupsRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void GetGroupsRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:relationservice.GetGroupsRequest.user_id)
}

// -------------------------------------------------------------------

// GetGroupsResponse

// int32 error_code = 1;
inline void GetGroupsResponse::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t GetGroupsResponse::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t GetGroupsResponse::error_code() const {
  // @@protoc_insertion_point(field_get:relationservice.GetGroupsResponse.error_code)
  return _internal_error_code();
}
inline void GetGroupsResponse::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void GetGroupsResponse::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:relationservice.GetGroupsResponse.error_code)
}

// string error_msg = 2;
inline void GetGroupsResponse::clear_error_msg() {
  _impl_.error_msg_.ClearToEmpty();
}
inline const std::string& GetGroupsResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:relationservice.GetGroupsResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGroupsResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GetGroupsResponse.error_msg)
}
inline std::string* GetGroupsResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:relationservice.GetGroupsResponse.error_msg)
  return _s;
}
inline const std::string& GetGroupsResponse::_internal_error_msg() const {
  return _impl_.error_msg_.Get();
}
inline void GetGroupsResponse::_internal_set_error_msg(const std::string& value) {
  
  _impl_.error_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGroupsResponse::_internal_mutable_error_msg() {
  
  return _impl_.error_msg_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGroupsResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:relationservice.GetGroupsResponse.error_msg)
  return _impl_.error_msg_.Release();
}
inline void GetGroupsResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  _impl_.error_msg_.SetAllocated(error_msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_msg_.IsDefault()) {
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GetGroupsResponse.error_msg)
}

// repeated .relationservice.GroupInfo groups = 3;
inline int GetGroupsResponse::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GetGroupsResponse::groups_size() const {
  return _internal_groups_size();
}
inline void GetGroupsResponse::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::relationservice::GroupInfo* GetGroupsResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:relationservice.GetGroupsResponse.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupInfo >*
GetGroupsResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:relationservice.GetGroupsResponse.groups)
  return &_impl_.groups_;
}
inline const ::relationservice::GroupInfo& GetGroupsResponse::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::relationservice::GroupInfo& GetGroupsResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:relationservice.GetGroupsResponse.groups)
  return _internal_groups(index);
}
inline ::relationservice::GroupInfo* GetGroupsResponse::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::relationservice::GroupInfo* GetGroupsResponse::add_groups() {
  ::relationservice::GroupInfo* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:relationservice.GetGroupsResponse.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupInfo >&
GetGroupsResponse::groups() const {
  // @@protoc_insertion_point(field_list:relationservice.GetGroupsResponse.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// GroupInfo

// int32 id = 1;
inline void GroupInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GroupInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GroupInfo::id() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupInfo.id)
  return _internal_id();
}
inline void GroupInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GroupInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:relationservice.GroupInfo.id)
}

// string name = 2;
inline void GroupInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupInfo::name() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GroupInfo.name)
}
inline std::string* GroupInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:relationservice.GroupInfo.name)
  return _s;
}
inline const std::string& GroupInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_name() {
  // @@protoc_insertion_point(field_release:relationservice.GroupInfo.name)
  return _impl_.name_.Release();
}
inline void GroupInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GroupInfo.name)
}

// string desc = 3;
inline void GroupInfo::clear_desc() {
  _impl_.desc_.ClearToEmpty();
}
inline const std::string& GroupInfo::desc() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupInfo.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupInfo::set_desc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.desc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GroupInfo.desc)
}
inline std::string* GroupInfo::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:relationservice.GroupInfo.desc)
  return _s;
}
inline const std::string& GroupInfo::_internal_desc() const {
  return _impl_.desc_.Get();
}
inline void GroupInfo::_internal_set_desc(const std::string& value) {
  
  _impl_.desc_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupInfo::_internal_mutable_desc() {
  
  return _impl_.desc_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupInfo::release_desc() {
  // @@protoc_insertion_point(field_release:relationservice.GroupInfo.desc)
  return _impl_.desc_.Release();
}
inline void GroupInfo::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  _impl_.desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.desc_.IsDefault()) {
    _impl_.desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GroupInfo.desc)
}

// repeated .relationservice.GroupUserInfo users = 4;
inline int GroupInfo::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int GroupInfo::users_size() const {
  return _internal_users_size();
}
inline void GroupInfo::clear_users() {
  _impl_.users_.Clear();
}
inline ::relationservice::GroupUserInfo* GroupInfo::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:relationservice.GroupInfo.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupUserInfo >*
GroupInfo::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:relationservice.GroupInfo.users)
  return &_impl_.users_;
}
inline const ::relationservice::GroupUserInfo& GroupInfo::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::relationservice::GroupUserInfo& GroupInfo::users(int index) const {
  // @@protoc_insertion_point(field_get:relationservice.GroupInfo.users)
  return _internal_users(index);
}
inline ::relationservice::GroupUserInfo* GroupInfo::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::relationservice::GroupUserInfo* GroupInfo::add_users() {
  ::relationservice::GroupUserInfo* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:relationservice.GroupInfo.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::relationservice::GroupUserInfo >&
GroupInfo::users() const {
  // @@protoc_insertion_point(field_list:relationservice.GroupInfo.users)
  return _impl_.users_;
}

// -------------------------------------------------------------------

// GroupUserInfo

// int32 id = 1;
inline void GroupUserInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GroupUserInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GroupUserInfo::id() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupUserInfo.id)
  return _internal_id();
}
inline void GroupUserInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GroupUserInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:relationservice.GroupUserInfo.id)
}

// string name = 2;
inline void GroupUserInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GroupUserInfo::name() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupUserInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUserInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GroupUserInfo.name)
}
inline std::string* GroupUserInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:relationservice.GroupUserInfo.name)
  return _s;
}
inline const std::string& GroupUserInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GroupUserInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUserInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:relationservice.GroupUserInfo.name)
  return _impl_.name_.Release();
}
inline void GroupUserInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GroupUserInfo.name)
}

// string state = 3;
inline void GroupUserInfo::clear_state() {
  _impl_.state_.ClearToEmpty();
}
inline const std::string& GroupUserInfo::state() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupUserInfo.state)
  return _internal_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUserInfo::set_state(ArgT0&& arg0, ArgT... args) {
 
 _impl_.state_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GroupUserInfo.state)
}
inline std::string* GroupUserInfo::mutable_state() {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:relationservice.GroupUserInfo.state)
  return _s;
}
inline const std::string& GroupUserInfo::_internal_state() const {
  return _impl_.state_.Get();
}
inline void GroupUserInfo::_internal_set_state(const std::string& value) {
  
  _impl_.state_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUserInfo::_internal_mutable_state() {
  
  return _impl_.state_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUserInfo::release_state() {
  // @@protoc_insertion_point(field_release:relationservice.GroupUserInfo.state)
  return _impl_.state_.Release();
}
inline void GroupUserInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  _impl_.state_.SetAllocated(state, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GroupUserInfo.state)
}

// string role = 4;
inline void GroupUserInfo::clear_role() {
  _impl_.role_.ClearToEmpty();
}
inline const std::string& GroupUserInfo::role() const {
  // @@protoc_insertion_point(field_get:relationservice.GroupUserInfo.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupUserInfo::set_role(ArgT0&& arg0, ArgT... args) {
 
 _impl_.role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:relationservice.GroupUserInfo.role)
}
inline std::string* GroupUserInfo::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:relationservice.GroupUserInfo.role)
  return _s;
}
inline const std::string& GroupUserInfo::_internal_role() const {
  return _impl_.role_.Get();
}
inline void GroupUserInfo::_internal_set_role(const std::string& value) {
  
  _impl_.role_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupUserInfo::_internal_mutable_role() {
  
  return _impl_.role_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupUserInfo::release_role() {
  // @@protoc_insertion_point(field_release:relationservice.GroupUserInfo.role)
  return _impl_.role_.Release();
}
inline void GroupUserInfo::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  _impl_.role_.SetAllocated(role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.role_.IsDefault()) {
    _impl_.role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:relationservice.GroupUserInfo.role)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relationservice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_relation_2eproto
