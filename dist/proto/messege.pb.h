// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messege.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messege_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messege_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021011 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messege_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messege_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messege_2eproto;
namespace messageservice {
class GroupMessageRequest;
struct GroupMessageRequestDefaultTypeInternal;
extern GroupMessageRequestDefaultTypeInternal _GroupMessageRequest_default_instance_;
class GroupMessageResponse;
struct GroupMessageResponseDefaultTypeInternal;
extern GroupMessageResponseDefaultTypeInternal _GroupMessageResponse_default_instance_;
class OfflineMessagesRequest;
struct OfflineMessagesRequestDefaultTypeInternal;
extern OfflineMessagesRequestDefaultTypeInternal _OfflineMessagesRequest_default_instance_;
class OfflineMessagesResponse;
struct OfflineMessagesResponseDefaultTypeInternal;
extern OfflineMessagesResponseDefaultTypeInternal _OfflineMessagesResponse_default_instance_;
class OneToOneMessageRequest;
struct OneToOneMessageRequestDefaultTypeInternal;
extern OneToOneMessageRequestDefaultTypeInternal _OneToOneMessageRequest_default_instance_;
class OneToOneMessageResponse;
struct OneToOneMessageResponseDefaultTypeInternal;
extern OneToOneMessageResponseDefaultTypeInternal _OneToOneMessageResponse_default_instance_;
class RemoveOfflineMessagesRequest;
struct RemoveOfflineMessagesRequestDefaultTypeInternal;
extern RemoveOfflineMessagesRequestDefaultTypeInternal _RemoveOfflineMessagesRequest_default_instance_;
class RemoveOfflineMessagesResponse;
struct RemoveOfflineMessagesResponseDefaultTypeInternal;
extern RemoveOfflineMessagesResponseDefaultTypeInternal _RemoveOfflineMessagesResponse_default_instance_;
class ResultCode;
struct ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
}  // namespace messageservice
PROTOBUF_NAMESPACE_OPEN
template<> ::messageservice::GroupMessageRequest* Arena::CreateMaybeMessage<::messageservice::GroupMessageRequest>(Arena*);
template<> ::messageservice::GroupMessageResponse* Arena::CreateMaybeMessage<::messageservice::GroupMessageResponse>(Arena*);
template<> ::messageservice::OfflineMessagesRequest* Arena::CreateMaybeMessage<::messageservice::OfflineMessagesRequest>(Arena*);
template<> ::messageservice::OfflineMessagesResponse* Arena::CreateMaybeMessage<::messageservice::OfflineMessagesResponse>(Arena*);
template<> ::messageservice::OneToOneMessageRequest* Arena::CreateMaybeMessage<::messageservice::OneToOneMessageRequest>(Arena*);
template<> ::messageservice::OneToOneMessageResponse* Arena::CreateMaybeMessage<::messageservice::OneToOneMessageResponse>(Arena*);
template<> ::messageservice::RemoveOfflineMessagesRequest* Arena::CreateMaybeMessage<::messageservice::RemoveOfflineMessagesRequest>(Arena*);
template<> ::messageservice::RemoveOfflineMessagesResponse* Arena::CreateMaybeMessage<::messageservice::RemoveOfflineMessagesResponse>(Arena*);
template<> ::messageservice::ResultCode* Arena::CreateMaybeMessage<::messageservice::ResultCode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messageservice {

// ===================================================================

class ResultCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {}
  ~ResultCode() override;
  explicit PROTOBUF_CONSTEXPR ResultCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultCode& from) {
    ResultCode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messageservice.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class OneToOneMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.OneToOneMessageRequest) */ {
 public:
  inline OneToOneMessageRequest() : OneToOneMessageRequest(nullptr) {}
  ~OneToOneMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR OneToOneMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneToOneMessageRequest(const OneToOneMessageRequest& from);
  OneToOneMessageRequest(OneToOneMessageRequest&& from) noexcept
    : OneToOneMessageRequest() {
    *this = ::std::move(from);
  }

  inline OneToOneMessageRequest& operator=(const OneToOneMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneToOneMessageRequest& operator=(OneToOneMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneToOneMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneToOneMessageRequest* internal_default_instance() {
    return reinterpret_cast<const OneToOneMessageRequest*>(
               &_OneToOneMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OneToOneMessageRequest& a, OneToOneMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OneToOneMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneToOneMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneToOneMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneToOneMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneToOneMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneToOneMessageRequest& from) {
    OneToOneMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToOneMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.OneToOneMessageRequest";
  }
  protected:
  explicit OneToOneMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
  };
  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 from_id = 1;
  void clear_from_id();
  int32_t from_id() const;
  void set_from_id(int32_t value);
  private:
  int32_t _internal_from_id() const;
  void _internal_set_from_id(int32_t value);
  public:

  // int32 to_id = 2;
  void clear_to_id();
  int32_t to_id() const;
  void set_to_id(int32_t value);
  private:
  int32_t _internal_to_id() const;
  void _internal_set_to_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messageservice.OneToOneMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t from_id_;
    int32_t to_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class OneToOneMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.OneToOneMessageResponse) */ {
 public:
  inline OneToOneMessageResponse() : OneToOneMessageResponse(nullptr) {}
  ~OneToOneMessageResponse() override;
  explicit PROTOBUF_CONSTEXPR OneToOneMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OneToOneMessageResponse(const OneToOneMessageResponse& from);
  OneToOneMessageResponse(OneToOneMessageResponse&& from) noexcept
    : OneToOneMessageResponse() {
    *this = ::std::move(from);
  }

  inline OneToOneMessageResponse& operator=(const OneToOneMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OneToOneMessageResponse& operator=(OneToOneMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OneToOneMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OneToOneMessageResponse* internal_default_instance() {
    return reinterpret_cast<const OneToOneMessageResponse*>(
               &_OneToOneMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OneToOneMessageResponse& a, OneToOneMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OneToOneMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OneToOneMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OneToOneMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OneToOneMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OneToOneMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OneToOneMessageResponse& from) {
    OneToOneMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OneToOneMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.OneToOneMessageResponse";
  }
  protected:
  explicit OneToOneMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .messageservice.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::messageservice::ResultCode& result() const;
  PROTOBUF_NODISCARD ::messageservice::ResultCode* release_result();
  ::messageservice::ResultCode* mutable_result();
  void set_allocated_result(::messageservice::ResultCode* result);
  private:
  const ::messageservice::ResultCode& _internal_result() const;
  ::messageservice::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::messageservice::ResultCode* result);
  ::messageservice::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:messageservice.OneToOneMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::messageservice::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.GroupMessageRequest) */ {
 public:
  inline GroupMessageRequest() : GroupMessageRequest(nullptr) {}
  ~GroupMessageRequest() override;
  explicit PROTOBUF_CONSTEXPR GroupMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMessageRequest(const GroupMessageRequest& from);
  GroupMessageRequest(GroupMessageRequest&& from) noexcept
    : GroupMessageRequest() {
    *this = ::std::move(from);
  }

  inline GroupMessageRequest& operator=(const GroupMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageRequest& operator=(GroupMessageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GroupMessageRequest*>(
               &_GroupMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupMessageRequest& a, GroupMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMessageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMessageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMessageRequest& from) {
    GroupMessageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.GroupMessageRequest";
  }
  protected:
  explicit GroupMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kFromIdFieldNumber = 1,
    kGroupIdFieldNumber = 2,
  };
  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 from_id = 1;
  void clear_from_id();
  int32_t from_id() const;
  void set_from_id(int32_t value);
  private:
  int32_t _internal_from_id() const;
  void _internal_set_from_id(int32_t value);
  public:

  // int32 group_id = 2;
  void clear_group_id();
  int32_t group_id() const;
  void set_group_id(int32_t value);
  private:
  int32_t _internal_group_id() const;
  void _internal_set_group_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messageservice.GroupMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int32_t from_id_;
    int32_t group_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class GroupMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.GroupMessageResponse) */ {
 public:
  inline GroupMessageResponse() : GroupMessageResponse(nullptr) {}
  ~GroupMessageResponse() override;
  explicit PROTOBUF_CONSTEXPR GroupMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupMessageResponse(const GroupMessageResponse& from);
  GroupMessageResponse(GroupMessageResponse&& from) noexcept
    : GroupMessageResponse() {
    *this = ::std::move(from);
  }

  inline GroupMessageResponse& operator=(const GroupMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMessageResponse& operator=(GroupMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GroupMessageResponse*>(
               &_GroupMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GroupMessageResponse& a, GroupMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupMessageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupMessageResponse& from) {
    GroupMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.GroupMessageResponse";
  }
  protected:
  explicit GroupMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .messageservice.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::messageservice::ResultCode& result() const;
  PROTOBUF_NODISCARD ::messageservice::ResultCode* release_result();
  ::messageservice::ResultCode* mutable_result();
  void set_allocated_result(::messageservice::ResultCode* result);
  private:
  const ::messageservice::ResultCode& _internal_result() const;
  ::messageservice::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::messageservice::ResultCode* result);
  ::messageservice::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:messageservice.GroupMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::messageservice::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class OfflineMessagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.OfflineMessagesRequest) */ {
 public:
  inline OfflineMessagesRequest() : OfflineMessagesRequest(nullptr) {}
  ~OfflineMessagesRequest() override;
  explicit PROTOBUF_CONSTEXPR OfflineMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineMessagesRequest(const OfflineMessagesRequest& from);
  OfflineMessagesRequest(OfflineMessagesRequest&& from) noexcept
    : OfflineMessagesRequest() {
    *this = ::std::move(from);
  }

  inline OfflineMessagesRequest& operator=(const OfflineMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineMessagesRequest& operator=(OfflineMessagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const OfflineMessagesRequest*>(
               &_OfflineMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OfflineMessagesRequest& a, OfflineMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineMessagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineMessagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OfflineMessagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OfflineMessagesRequest& from) {
    OfflineMessagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineMessagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.OfflineMessagesRequest";
  }
  protected:
  explicit OfflineMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messageservice.OfflineMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class OfflineMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.OfflineMessagesResponse) */ {
 public:
  inline OfflineMessagesResponse() : OfflineMessagesResponse(nullptr) {}
  ~OfflineMessagesResponse() override;
  explicit PROTOBUF_CONSTEXPR OfflineMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OfflineMessagesResponse(const OfflineMessagesResponse& from);
  OfflineMessagesResponse(OfflineMessagesResponse&& from) noexcept
    : OfflineMessagesResponse() {
    *this = ::std::move(from);
  }

  inline OfflineMessagesResponse& operator=(const OfflineMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OfflineMessagesResponse& operator=(OfflineMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OfflineMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OfflineMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const OfflineMessagesResponse*>(
               &_OfflineMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OfflineMessagesResponse& a, OfflineMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OfflineMessagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OfflineMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OfflineMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OfflineMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OfflineMessagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OfflineMessagesResponse& from) {
    OfflineMessagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineMessagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.OfflineMessagesResponse";
  }
  protected:
  explicit OfflineMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated bytes messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  const std::string& messages(int index) const;
  std::string* mutable_messages(int index);
  void set_messages(int index, const std::string& value);
  void set_messages(int index, std::string&& value);
  void set_messages(int index, const char* value);
  void set_messages(int index, const void* value, size_t size);
  std::string* add_messages();
  void add_messages(const std::string& value);
  void add_messages(std::string&& value);
  void add_messages(const char* value);
  void add_messages(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_messages();
  private:
  const std::string& _internal_messages(int index) const;
  std::string* _internal_add_messages();
  public:

  // .messageservice.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::messageservice::ResultCode& result() const;
  PROTOBUF_NODISCARD ::messageservice::ResultCode* release_result();
  ::messageservice::ResultCode* mutable_result();
  void set_allocated_result(::messageservice::ResultCode* result);
  private:
  const ::messageservice::ResultCode& _internal_result() const;
  ::messageservice::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::messageservice::ResultCode* result);
  ::messageservice::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:messageservice.OfflineMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> messages_;
    ::messageservice::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class RemoveOfflineMessagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.RemoveOfflineMessagesRequest) */ {
 public:
  inline RemoveOfflineMessagesRequest() : RemoveOfflineMessagesRequest(nullptr) {}
  ~RemoveOfflineMessagesRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveOfflineMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOfflineMessagesRequest(const RemoveOfflineMessagesRequest& from);
  RemoveOfflineMessagesRequest(RemoveOfflineMessagesRequest&& from) noexcept
    : RemoveOfflineMessagesRequest() {
    *this = ::std::move(from);
  }

  inline RemoveOfflineMessagesRequest& operator=(const RemoveOfflineMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOfflineMessagesRequest& operator=(RemoveOfflineMessagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOfflineMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOfflineMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveOfflineMessagesRequest*>(
               &_RemoveOfflineMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RemoveOfflineMessagesRequest& a, RemoveOfflineMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOfflineMessagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOfflineMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOfflineMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOfflineMessagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveOfflineMessagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveOfflineMessagesRequest& from) {
    RemoveOfflineMessagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOfflineMessagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.RemoveOfflineMessagesRequest";
  }
  protected:
  explicit RemoveOfflineMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // int32 user_id = 1;
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messageservice.RemoveOfflineMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// -------------------------------------------------------------------

class RemoveOfflineMessagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messageservice.RemoveOfflineMessagesResponse) */ {
 public:
  inline RemoveOfflineMessagesResponse() : RemoveOfflineMessagesResponse(nullptr) {}
  ~RemoveOfflineMessagesResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveOfflineMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOfflineMessagesResponse(const RemoveOfflineMessagesResponse& from);
  RemoveOfflineMessagesResponse(RemoveOfflineMessagesResponse&& from) noexcept
    : RemoveOfflineMessagesResponse() {
    *this = ::std::move(from);
  }

  inline RemoveOfflineMessagesResponse& operator=(const RemoveOfflineMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOfflineMessagesResponse& operator=(RemoveOfflineMessagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOfflineMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOfflineMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveOfflineMessagesResponse*>(
               &_RemoveOfflineMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RemoveOfflineMessagesResponse& a, RemoveOfflineMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOfflineMessagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOfflineMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOfflineMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOfflineMessagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveOfflineMessagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveOfflineMessagesResponse& from) {
    RemoveOfflineMessagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOfflineMessagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messageservice.RemoveOfflineMessagesResponse";
  }
  protected:
  explicit RemoveOfflineMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .messageservice.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::messageservice::ResultCode& result() const;
  PROTOBUF_NODISCARD ::messageservice::ResultCode* release_result();
  ::messageservice::ResultCode* mutable_result();
  void set_allocated_result(::messageservice::ResultCode* result);
  private:
  const ::messageservice::ResultCode& _internal_result() const;
  ::messageservice::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::messageservice::ResultCode* result);
  ::messageservice::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:messageservice.RemoveOfflineMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::messageservice::ResultCode* result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messege_2eproto;
};
// ===================================================================

class MessageService_Stub;

class MessageService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MessageService() {};
 public:
  virtual ~MessageService();

  typedef MessageService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void SendOneToOneMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::OneToOneMessageRequest* request,
                       ::messageservice::OneToOneMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SendGroupMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::GroupMessageRequest* request,
                       ::messageservice::GroupMessageResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetOfflineMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::OfflineMessagesRequest* request,
                       ::messageservice::OfflineMessagesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveOfflineMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::RemoveOfflineMessagesRequest* request,
                       ::messageservice::RemoveOfflineMessagesResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MessageService);
};

class MessageService_Stub : public MessageService {
 public:
  MessageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MessageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MessageService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MessageService ------------------------------------------

  void SendOneToOneMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::OneToOneMessageRequest* request,
                       ::messageservice::OneToOneMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void SendGroupMessage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::GroupMessageRequest* request,
                       ::messageservice::GroupMessageResponse* response,
                       ::google::protobuf::Closure* done);
  void GetOfflineMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::OfflineMessagesRequest* request,
                       ::messageservice::OfflineMessagesResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveOfflineMessages(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::messageservice::RemoveOfflineMessagesRequest* request,
                       ::messageservice::RemoveOfflineMessagesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MessageService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ResultCode::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:messageservice.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ResultCode::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:messageservice.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:messageservice.ResultCode.errmsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultCode::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messageservice.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:messageservice.ResultCode.errmsg)
  return _s;
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:messageservice.ResultCode.errmsg)
  return _impl_.errmsg_.Release();
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messageservice.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// OneToOneMessageRequest

// int32 from_id = 1;
inline void OneToOneMessageRequest::clear_from_id() {
  _impl_.from_id_ = 0;
}
inline int32_t OneToOneMessageRequest::_internal_from_id() const {
  return _impl_.from_id_;
}
inline int32_t OneToOneMessageRequest::from_id() const {
  // @@protoc_insertion_point(field_get:messageservice.OneToOneMessageRequest.from_id)
  return _internal_from_id();
}
inline void OneToOneMessageRequest::_internal_set_from_id(int32_t value) {
  
  _impl_.from_id_ = value;
}
inline void OneToOneMessageRequest::set_from_id(int32_t value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:messageservice.OneToOneMessageRequest.from_id)
}

// int32 to_id = 2;
inline void OneToOneMessageRequest::clear_to_id() {
  _impl_.to_id_ = 0;
}
inline int32_t OneToOneMessageRequest::_internal_to_id() const {
  return _impl_.to_id_;
}
inline int32_t OneToOneMessageRequest::to_id() const {
  // @@protoc_insertion_point(field_get:messageservice.OneToOneMessageRequest.to_id)
  return _internal_to_id();
}
inline void OneToOneMessageRequest::_internal_set_to_id(int32_t value) {
  
  _impl_.to_id_ = value;
}
inline void OneToOneMessageRequest::set_to_id(int32_t value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:messageservice.OneToOneMessageRequest.to_id)
}

// bytes message = 3;
inline void OneToOneMessageRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& OneToOneMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:messageservice.OneToOneMessageRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OneToOneMessageRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messageservice.OneToOneMessageRequest.message)
}
inline std::string* OneToOneMessageRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:messageservice.OneToOneMessageRequest.message)
  return _s;
}
inline const std::string& OneToOneMessageRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void OneToOneMessageRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* OneToOneMessageRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* OneToOneMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:messageservice.OneToOneMessageRequest.message)
  return _impl_.message_.Release();
}
inline void OneToOneMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messageservice.OneToOneMessageRequest.message)
}

// -------------------------------------------------------------------

// OneToOneMessageResponse

// .messageservice.ResultCode result = 1;
inline bool OneToOneMessageResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool OneToOneMessageResponse::has_result() const {
  return _internal_has_result();
}
inline void OneToOneMessageResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::messageservice::ResultCode& OneToOneMessageResponse::_internal_result() const {
  const ::messageservice::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::messageservice::ResultCode&>(
      ::messageservice::_ResultCode_default_instance_);
}
inline const ::messageservice::ResultCode& OneToOneMessageResponse::result() const {
  // @@protoc_insertion_point(field_get:messageservice.OneToOneMessageResponse.result)
  return _internal_result();
}
inline void OneToOneMessageResponse::unsafe_arena_set_allocated_result(
    ::messageservice::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messageservice.OneToOneMessageResponse.result)
}
inline ::messageservice::ResultCode* OneToOneMessageResponse::release_result() {
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::messageservice::ResultCode* OneToOneMessageResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:messageservice.OneToOneMessageResponse.result)
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::messageservice::ResultCode* OneToOneMessageResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::messageservice::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::messageservice::ResultCode* OneToOneMessageResponse::mutable_result() {
  ::messageservice::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:messageservice.OneToOneMessageResponse.result)
  return _msg;
}
inline void OneToOneMessageResponse::set_allocated_result(::messageservice::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:messageservice.OneToOneMessageResponse.result)
}

// -------------------------------------------------------------------

// GroupMessageRequest

// int32 from_id = 1;
inline void GroupMessageRequest::clear_from_id() {
  _impl_.from_id_ = 0;
}
inline int32_t GroupMessageRequest::_internal_from_id() const {
  return _impl_.from_id_;
}
inline int32_t GroupMessageRequest::from_id() const {
  // @@protoc_insertion_point(field_get:messageservice.GroupMessageRequest.from_id)
  return _internal_from_id();
}
inline void GroupMessageRequest::_internal_set_from_id(int32_t value) {
  
  _impl_.from_id_ = value;
}
inline void GroupMessageRequest::set_from_id(int32_t value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:messageservice.GroupMessageRequest.from_id)
}

// int32 group_id = 2;
inline void GroupMessageRequest::clear_group_id() {
  _impl_.group_id_ = 0;
}
inline int32_t GroupMessageRequest::_internal_group_id() const {
  return _impl_.group_id_;
}
inline int32_t GroupMessageRequest::group_id() const {
  // @@protoc_insertion_point(field_get:messageservice.GroupMessageRequest.group_id)
  return _internal_group_id();
}
inline void GroupMessageRequest::_internal_set_group_id(int32_t value) {
  
  _impl_.group_id_ = value;
}
inline void GroupMessageRequest::set_group_id(int32_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:messageservice.GroupMessageRequest.group_id)
}

// bytes message = 3;
inline void GroupMessageRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GroupMessageRequest::message() const {
  // @@protoc_insertion_point(field_get:messageservice.GroupMessageRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GroupMessageRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messageservice.GroupMessageRequest.message)
}
inline std::string* GroupMessageRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:messageservice.GroupMessageRequest.message)
  return _s;
}
inline const std::string& GroupMessageRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GroupMessageRequest::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GroupMessageRequest::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GroupMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:messageservice.GroupMessageRequest.message)
  return _impl_.message_.Release();
}
inline void GroupMessageRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messageservice.GroupMessageRequest.message)
}

// -------------------------------------------------------------------

// GroupMessageResponse

// .messageservice.ResultCode result = 1;
inline bool GroupMessageResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool GroupMessageResponse::has_result() const {
  return _internal_has_result();
}
inline void GroupMessageResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::messageservice::ResultCode& GroupMessageResponse::_internal_result() const {
  const ::messageservice::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::messageservice::ResultCode&>(
      ::messageservice::_ResultCode_default_instance_);
}
inline const ::messageservice::ResultCode& GroupMessageResponse::result() const {
  // @@protoc_insertion_point(field_get:messageservice.GroupMessageResponse.result)
  return _internal_result();
}
inline void GroupMessageResponse::unsafe_arena_set_allocated_result(
    ::messageservice::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messageservice.GroupMessageResponse.result)
}
inline ::messageservice::ResultCode* GroupMessageResponse::release_result() {
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::messageservice::ResultCode* GroupMessageResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:messageservice.GroupMessageResponse.result)
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::messageservice::ResultCode* GroupMessageResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::messageservice::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::messageservice::ResultCode* GroupMessageResponse::mutable_result() {
  ::messageservice::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:messageservice.GroupMessageResponse.result)
  return _msg;
}
inline void GroupMessageResponse::set_allocated_result(::messageservice::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:messageservice.GroupMessageResponse.result)
}

// -------------------------------------------------------------------

// OfflineMessagesRequest

// int32 user_id = 1;
inline void OfflineMessagesRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t OfflineMessagesRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t OfflineMessagesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:messageservice.OfflineMessagesRequest.user_id)
  return _internal_user_id();
}
inline void OfflineMessagesRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void OfflineMessagesRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:messageservice.OfflineMessagesRequest.user_id)
}

// -------------------------------------------------------------------

// OfflineMessagesResponse

// .messageservice.ResultCode result = 1;
inline bool OfflineMessagesResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool OfflineMessagesResponse::has_result() const {
  return _internal_has_result();
}
inline void OfflineMessagesResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::messageservice::ResultCode& OfflineMessagesResponse::_internal_result() const {
  const ::messageservice::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::messageservice::ResultCode&>(
      ::messageservice::_ResultCode_default_instance_);
}
inline const ::messageservice::ResultCode& OfflineMessagesResponse::result() const {
  // @@protoc_insertion_point(field_get:messageservice.OfflineMessagesResponse.result)
  return _internal_result();
}
inline void OfflineMessagesResponse::unsafe_arena_set_allocated_result(
    ::messageservice::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messageservice.OfflineMessagesResponse.result)
}
inline ::messageservice::ResultCode* OfflineMessagesResponse::release_result() {
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::messageservice::ResultCode* OfflineMessagesResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:messageservice.OfflineMessagesResponse.result)
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::messageservice::ResultCode* OfflineMessagesResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::messageservice::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::messageservice::ResultCode* OfflineMessagesResponse::mutable_result() {
  ::messageservice::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:messageservice.OfflineMessagesResponse.result)
  return _msg;
}
inline void OfflineMessagesResponse::set_allocated_result(::messageservice::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:messageservice.OfflineMessagesResponse.result)
}

// repeated bytes messages = 2;
inline int OfflineMessagesResponse::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int OfflineMessagesResponse::messages_size() const {
  return _internal_messages_size();
}
inline void OfflineMessagesResponse::clear_messages() {
  _impl_.messages_.Clear();
}
inline std::string* OfflineMessagesResponse::add_messages() {
  std::string* _s = _internal_add_messages();
  // @@protoc_insertion_point(field_add_mutable:messageservice.OfflineMessagesResponse.messages)
  return _s;
}
inline const std::string& OfflineMessagesResponse::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const std::string& OfflineMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:messageservice.OfflineMessagesResponse.messages)
  return _internal_messages(index);
}
inline std::string* OfflineMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:messageservice.OfflineMessagesResponse.messages)
  return _impl_.messages_.Mutable(index);
}
inline void OfflineMessagesResponse::set_messages(int index, const std::string& value) {
  _impl_.messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::set_messages(int index, std::string&& value) {
  _impl_.messages_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::set_messages(int index, const void* value, size_t size) {
  _impl_.messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:messageservice.OfflineMessagesResponse.messages)
}
inline std::string* OfflineMessagesResponse::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline void OfflineMessagesResponse::add_messages(const std::string& value) {
  _impl_.messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::add_messages(std::string&& value) {
  _impl_.messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::add_messages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:messageservice.OfflineMessagesResponse.messages)
}
inline void OfflineMessagesResponse::add_messages(const void* value, size_t size) {
  _impl_.messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:messageservice.OfflineMessagesResponse.messages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OfflineMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:messageservice.OfflineMessagesResponse.messages)
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OfflineMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:messageservice.OfflineMessagesResponse.messages)
  return &_impl_.messages_;
}

// -------------------------------------------------------------------

// RemoveOfflineMessagesRequest

// int32 user_id = 1;
inline void RemoveOfflineMessagesRequest::clear_user_id() {
  _impl_.user_id_ = 0;
}
inline int32_t RemoveOfflineMessagesRequest::_internal_user_id() const {
  return _impl_.user_id_;
}
inline int32_t RemoveOfflineMessagesRequest::user_id() const {
  // @@protoc_insertion_point(field_get:messageservice.RemoveOfflineMessagesRequest.user_id)
  return _internal_user_id();
}
inline void RemoveOfflineMessagesRequest::_internal_set_user_id(int32_t value) {
  
  _impl_.user_id_ = value;
}
inline void RemoveOfflineMessagesRequest::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:messageservice.RemoveOfflineMessagesRequest.user_id)
}

// -------------------------------------------------------------------

// RemoveOfflineMessagesResponse

// .messageservice.ResultCode result = 1;
inline bool RemoveOfflineMessagesResponse::_internal_has_result() const {
  return this != internal_default_instance() && _impl_.result_ != nullptr;
}
inline bool RemoveOfflineMessagesResponse::has_result() const {
  return _internal_has_result();
}
inline void RemoveOfflineMessagesResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_ != nullptr) {
    delete _impl_.result_;
  }
  _impl_.result_ = nullptr;
}
inline const ::messageservice::ResultCode& RemoveOfflineMessagesResponse::_internal_result() const {
  const ::messageservice::ResultCode* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::messageservice::ResultCode&>(
      ::messageservice::_ResultCode_default_instance_);
}
inline const ::messageservice::ResultCode& RemoveOfflineMessagesResponse::result() const {
  // @@protoc_insertion_point(field_get:messageservice.RemoveOfflineMessagesResponse.result)
  return _internal_result();
}
inline void RemoveOfflineMessagesResponse::unsafe_arena_set_allocated_result(
    ::messageservice::ResultCode* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:messageservice.RemoveOfflineMessagesResponse.result)
}
inline ::messageservice::ResultCode* RemoveOfflineMessagesResponse::release_result() {
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::messageservice::ResultCode* RemoveOfflineMessagesResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:messageservice.RemoveOfflineMessagesResponse.result)
  
  ::messageservice::ResultCode* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::messageservice::ResultCode* RemoveOfflineMessagesResponse::_internal_mutable_result() {
  
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::messageservice::ResultCode>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::messageservice::ResultCode* RemoveOfflineMessagesResponse::mutable_result() {
  ::messageservice::ResultCode* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:messageservice.RemoveOfflineMessagesResponse.result)
  return _msg;
}
inline void RemoveOfflineMessagesResponse::set_allocated_result(::messageservice::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:messageservice.RemoveOfflineMessagesResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messageservice

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messege_2eproto
